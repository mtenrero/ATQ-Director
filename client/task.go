// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ATQ - Director": task Resource Client
//
// Command:
// $ goagen
// --design=github.com/mtenrero/ATQ-Director/http/design
// --out=$(GOPATH)\src\github.com\mtenrero\ATQ-Director
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateTaskPath computes a request path to the create action of task.
func CreateTaskPath() string {

	return fmt.Sprintf("/api/task/")
}

// Creates a new Task in the Swarm according with the config provided in the JSON body
func (c *Client) CreateTask(ctx context.Context, path string, payload *TaskPayload) (*http.Response, error) {
	req, err := c.NewCreateTaskRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTaskRequest create the request corresponding to the create action endpoint of the task resource.
func (c *Client) NewCreateTaskRequest(ctx context.Context, path string, payload *TaskPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DeleteTaskPath computes a request path to the delete action of task.
func DeleteTaskPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/task/%s", param0)
}

// Deletes the Task specified and its components
func (c *Client) DeleteTask(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTaskRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTaskRequest create the request corresponding to the delete action endpoint of the task resource.
func (c *Client) NewDeleteTaskRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// InspectTaskPath computes a request path to the inspect action of task.
func InspectTaskPath(id uuid.UUID) string {
	param0 := id.String()

	return fmt.Sprintf("/api/task/%s", param0)
}

// Get Task's details
func (c *Client) InspectTask(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewInspectTaskRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewInspectTaskRequest create the request corresponding to the inspect action endpoint of the task resource.
func (c *Client) NewInspectTaskRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
