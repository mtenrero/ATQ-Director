// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ATQ - Director": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/mtenrero/ATQ-Director/http/design
// --out=$(GOPATH)/src/github.com/mtenrero/ATQ-Director
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// User upload files response (default view)
//
// Identifier: application/atq.databind.upload+json; view=default
type AtqDatabindUpload struct {
	// Upload ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// User upload files response (error view)
//
// Identifier: application/atq.databind.upload+json; view=error
type AtqDatabindUploadError struct {
	// Error message if errored
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// DecodeAtqDatabindUpload decodes the AtqDatabindUpload instance encoded in resp body.
func (c *Client) DecodeAtqDatabindUpload(resp *http.Response) (*AtqDatabindUpload, error) {
	var decoded AtqDatabindUpload
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAtqDatabindUploadError decodes the AtqDatabindUploadError instance encoded in resp body.
func (c *Client) DecodeAtqDatabindUploadError(resp *http.Response) (*AtqDatabindUploadError, error) {
	var decoded AtqDatabindUploadError
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AtqDatabindUploadCollection is the media type for an array of AtqDatabindUpload (default view)
//
// Identifier: application/atq.databind.upload+json; type=collection; view=default
type AtqDatabindUploadCollection []*AtqDatabindUpload

// AtqDatabindUploadCollection is the media type for an array of AtqDatabindUpload (error view)
//
// Identifier: application/atq.databind.upload+json; type=collection; view=error
type AtqDatabindUploadErrorCollection []*AtqDatabindUploadError

// DecodeAtqDatabindUploadCollection decodes the AtqDatabindUploadCollection instance encoded in resp body.
func (c *Client) DecodeAtqDatabindUploadCollection(resp *http.Response) (AtqDatabindUploadCollection, error) {
	var decoded AtqDatabindUploadCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeAtqDatabindUploadErrorCollection decodes the AtqDatabindUploadErrorCollection instance encoded in resp body.
func (c *Client) DecodeAtqDatabindUploadErrorCollection(resp *http.Response) (AtqDatabindUploadErrorCollection, error) {
	var decoded AtqDatabindUploadErrorCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Created Relevant Service Information (default view)
//
// Identifier: application/atq.service+json; view=default
type AtqService struct {
	// ATQ Service internal alias
	Alias *string `form:"alias,omitempty" json:"alias,omitempty" xml:"alias,omitempty"`
	// ATQ FileID if exists
	FileID *string `form:"fileId,omitempty" json:"fileId,omitempty" xml:"fileId,omitempty"`
	// Docker Service internal identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// Created Relevant Service Information (full view)
//
// Identifier: application/atq.service+json; view=full
type AtqServiceFull struct {
	// ATQ Service internal alias
	Alias *string `form:"alias,omitempty" json:"alias,omitempty" xml:"alias,omitempty"`
	// Arguments passed to the containers
	Args []string `form:"args,omitempty" json:"args,omitempty" xml:"args,omitempty"`
	// ATQ FileID if exists
	FileID *string `form:"fileId,omitempty" json:"fileId,omitempty" xml:"fileId,omitempty"`
	// Docker Service internal identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Docker Image Name
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// Amount of Replicas
	Replicas *int `form:"replicas,omitempty" json:"replicas,omitempty" xml:"replicas,omitempty"`
	// Interactive Shell
	Tty *bool `form:"tty,omitempty" json:"tty,omitempty" xml:"tty,omitempty"`
}

// Created Relevant Service Information (minimal view)
//
// Identifier: application/atq.service+json; view=minimal
type AtqServiceMinimal struct {
	// Docker Service internal identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DecodeAtqService decodes the AtqService instance encoded in resp body.
func (c *Client) DecodeAtqService(resp *http.Response) (*AtqService, error) {
	var decoded AtqService
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAtqServiceFull decodes the AtqServiceFull instance encoded in resp body.
func (c *Client) DecodeAtqServiceFull(resp *http.Response) (*AtqServiceFull, error) {
	var decoded AtqServiceFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAtqServiceMinimal decodes the AtqServiceMinimal instance encoded in resp body.
func (c *Client) DecodeAtqServiceMinimal(resp *http.Response) (*AtqServiceMinimal, error) {
	var decoded AtqServiceMinimal
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Swarm Details (default view)
//
// Identifier: application/atq.swarm+json; view=default
type AtqSwarm struct {
	JoinTokens *JoinTokens `form:"joinTokens,omitempty" json:"joinTokens,omitempty" xml:"joinTokens,omitempty"`
}

// Swarm Details (error view)
//
// Identifier: application/atq.swarm+json; view=error
type AtqSwarmError struct {
	// Swarm Error Message
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// DecodeAtqSwarm decodes the AtqSwarm instance encoded in resp body.
func (c *Client) DecodeAtqSwarm(resp *http.Response) (*AtqSwarm, error) {
	var decoded AtqSwarm
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAtqSwarmError decodes the AtqSwarmError instance encoded in resp body.
func (c *Client) DecodeAtqSwarmError(resp *http.Response) (*AtqSwarmError, error) {
	var decoded AtqSwarmError
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Task description (default view)
//
// Identifier: application/atq.task+json; view=default
type AtqTask struct {
	// Task ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Status of the Task
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// Validate validates the AtqTask media type instance.
func (mt *AtqTask) Validate() (err error) {
	if mt.Status != nil {
		if !(*mt.Status == "initializing" || *mt.Status == "started" || *mt.Status == "stopped" || *mt.Status == "finished" || *mt.Status == "errored") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, *mt.Status, []interface{}{"initializing", "started", "stopped", "finished", "errored"}))
		}
	}
	return
}

// Task description (full view)
//
// Identifier: application/atq.task+json; view=full
type AtqTaskFull struct {
	// Manual delay between starting Master and Worker services
	Delay *int `form:"delay,omitempty" json:"delay,omitempty" xml:"delay,omitempty"`
	// Task ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Master Service definition
	Master *AtqService `form:"master,omitempty" json:"master,omitempty" xml:"master,omitempty"`
	// Status of the Task
	Status      *string      `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	WaitCommand *WaitCommand `form:"waitCommand,omitempty" json:"waitCommand,omitempty" xml:"waitCommand,omitempty"`
	// Worker Service definition
	Worker *AtqService `form:"worker,omitempty" json:"worker,omitempty" xml:"worker,omitempty"`
}

// Validate validates the AtqTaskFull media type instance.
func (mt *AtqTaskFull) Validate() (err error) {
	if mt.Status != nil {
		if !(*mt.Status == "initializing" || *mt.Status == "started" || *mt.Status == "stopped" || *mt.Status == "finished" || *mt.Status == "errored") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, *mt.Status, []interface{}{"initializing", "started", "stopped", "finished", "errored"}))
		}
	}
	return
}

// DecodeAtqTask decodes the AtqTask instance encoded in resp body.
func (c *Client) DecodeAtqTask(resp *http.Response) (*AtqTask, error) {
	var decoded AtqTask
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAtqTaskFull decodes the AtqTaskFull instance encoded in resp body.
func (c *Client) DecodeAtqTaskFull(resp *http.Response) (*AtqTaskFull, error) {
	var decoded AtqTaskFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
