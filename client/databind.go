// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "ATQ - Director": databind Resource Client
//
// Command:
// $ goagen
// --design=github.com/mtenrero/ATQ-Director/http/design
// --out=$(GOPATH)/src/github.com/mtenrero/ATQ-Director
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListDatabindPath computes a request path to the list action of databind.
func ListDatabindPath() string {

	return fmt.Sprintf("/api/databind/list")
}

// List of uploaded and available files
func (c *Client) ListDatabind(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListDatabindRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDatabindRequest create the request corresponding to the list action endpoint of the databind resource.
func (c *Client) NewListDatabindRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UploadDatabindPath computes a request path to the upload action of databind.
func UploadDatabindPath() string {

	return fmt.Sprintf("/api/databind/upload")
}

// Upload new zipped file for later usage with a Task
func (c *Client) UploadDatabind(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUploadDatabindRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUploadDatabindRequest create the request corresponding to the upload action endpoint of the databind resource.
func (c *Client) NewUploadDatabindRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
